{"version":3,"sources":["common/Header.js","utils/index.js","home/SecondsInput.js","redux/selectors.js","home/ExerciseForm.js","redux/actions.js","redux/actionTypes.js","home/ExerciseTable.js","App.js","serviceWorker.js","redux/reducers/exercises.js","Api.js","redux/reducers/index.js","localStorage.js","redux/store.js","index.js","home/exercisetable.module.scss","common/header.module.scss","home/exerciseform.module.scss"],"names":["Header","data-testid","className","styles","headerContainer","headerLogoName","headerLogoNameHighlight","React","Component","TIME_GROUPS_REGEX","parseTimeString","time","match","hours","minutes","seconds","parseInt","newSeconds","newMinutes","Math","floor","splitAndCalculateTime","timeString","reduce","string","entry","toString","padStart","slice","formatTimeToString","humanizeSeconds","durations","intervalToDuration","start","end","humanized","formatDuration","SecondsInput","props","state","value","mask","maskPlaceholder","handleChange","bind","event","target","this","onChangeTime","setState","id","testId","onKeyUp","onChange","timePicker","getExercisesState","store","exercises","getExercisesOptionsState","ExerciseForm","exercise","date","type","errors","onChangeDate","onChangeType","onSubmitForm","fetchExercisesOptions","preventDefault","exercisesOptions","undefined","includes","length","isValid","Object","values","filter","validateExerciseForm","addExercise","map","index","key","addExerciseContainer","addExerciseForm","onSubmit","formGroup","formLabel","htmlFor","title","placeholder","formInput","inputError","formSelect","dateFormat","selected","placeholderText","showDisabledMonthNavigation","autoComplete","formGroup05","submitButton","submitButtonMarginTop","onClick","defaultProps","connect","getAllExercisesOptions","dispatch","payload","uuid","ExerciseTable","columns","name","selector","sortable","cell","i","format","Date","button","removeExerciseButton","window","confirm","removeExercise","totalExerciseSeconds","acc","humanizedSeconds","header","headingPrincipal","headingSecondary","noHeader","data","defaultSortField","pagination","getAllExercises","App","Boolean","location","hostname","initialState","reducer","action","options","combineReducers","deserializeExercise","createStore","rootReducer","loadedState","localStorage","getItem","JSON","parse","deserializedExercises","err","loadState","subscribe","setItem","stringify","console","error","saveState","getState","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message","module","exports"],"mappings":"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","file":"static/js/main.98ce966b.chunk.js","sourcesContent":["import React from \"react\";\nimport styles from \"./header.module.scss\";\n\nexport default class Header extends React.Component {\n  render() {\n    return (\n      <header data-testid=\"header\" className={ styles.headerContainer }>\n        <h1 data-testid=\"heading\" className={ styles.headerLogoName }>\n          <span className={ styles.headerLogoNameHighlight}>Workout</span> Log\n        </h1>\n      </header>\n    );\n  }\n}\n","import { intervalToDuration } from \"date-fns\";\nimport formatDuration from \"date-fns/formatDuration\";\n\nconst TIME_GROUPS_REGEX = /(\\d{2}):(\\d{2}):(\\d{2})/;\n\n/**\n * Uses a string as time format to verify if it need some work to normalize\n * minutes and seconds groups. For exemple if it gets a string like\n * `00:70:00` it should return an array like [1, 10, 0] thats represents\n * hours, minutes and seconds respectively.\n *\n * @param {string} time\n * @return {array}\n */\nconst splitAndCalculateTime = (time) => {\n  let [, hours, minutes, seconds] = time.match(TIME_GROUPS_REGEX);\n\n  hours = parseInt(hours);\n  minutes = parseInt(minutes);\n  seconds = parseInt(seconds);\n\n  let newSeconds = seconds % 60;\n  let newMinutes = Math.floor(seconds / 60) + (minutes % 60);\n  let newHours = Math.floor(minutes / 60) + hours;\n\n  return [newHours, newMinutes, newSeconds];\n};\n\n/**\n * Merges the time parts to an unique string using the format `hh:mm:ss`.\n * @param {int} hours\n * @param {int} minutes\n * @param {int} seconds\n * @return {string}\n */\nconst formatTimeToString = (hours, minutes, seconds) => {\n  return [hours, minutes, seconds]\n    .reduce((string, entry) => {\n      return string + entry.toString().padStart(2, \"0\") + \":\";\n    }, \"\")\n    .slice(0, 8);\n};\n\n/**\n * This funtion uses a string in time format like `hh:mm:ss` to\n * make sure it does not contain things like `00:70:00`. If a strange\n * time was used it tries to convert it. Using the example above we must\n * got the time formated as 01:10:00.\n *\n * A trick exists in this function, the maximum hours used here is 99, it\n * can't affoard 100 hours for example, this is limited because of the mask\n * used in the component.\n *\n * @param {string} time\n * @return {Object}\n */\nconst parseTimeString = (time) => {\n  let [hours, minutes, seconds] = splitAndCalculateTime(time);\n\n  if (hours > 99) {\n    hours = 99;\n  }\n\n  let timeString = formatTimeToString(hours, minutes, seconds);\n  let timeInSeconds = hours * 60 * 60 + minutes * 60 + seconds;\n\n  return { timeString: timeString, seconds: timeInSeconds };\n};\n\nconst validateExerciseForm = ({ exercise, exercisesOptions }) => {\n  let errors = {\n    seconds: null,\n    type: null,\n    date: null,\n  };\n\n  if (exercise?.seconds === 0 || exercise?.seconds === undefined) {\n    errors.seconds = \"Please inform a time\";\n  } else {\n    errors.seconds = null;\n  }\n\n  if (!exercisesOptions?.includes(exercise?.type)) {\n    errors.type = \"Please select an exercise\";\n  } else {\n    errors.type = null;\n  }\n\n  if (exercise?.date == null || exercise?.date?.length === 0) {\n    errors.date = \"Please select a date\";\n  } else {\n    errors.date = null;\n  }\n\n  let isValid =\n    Object.values(errors).filter((value) => value !== null).length === 0;\n\n  return { errors, isValid: isValid };\n};\n\n/**\n * Converts the seconds number into a readable human string like '1 hour' or\n * '32 minutes and 6 seconds'.\n *\n * It uses the date-fns library.\n * @param {int} seconds\n */\nconst humanizeSeconds = (seconds) => {\n  const durations = intervalToDuration({ start: 0, end: seconds * 1000 });\n  const humanized = formatDuration(durations);\n  return humanized ? humanized : \"0 hour\";\n};\n\nexport {\n  splitAndCalculateTime,\n  formatTimeToString,\n  parseTimeString,\n  validateExerciseForm,\n  humanizeSeconds,\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport InputMask from \"react-input-mask\";\nimport { parseTimeString } from \"../utils/index\";\nimport styles from \"./secondsinput.module.scss\";\n\nexport default class SecondsInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: \"00:00:00\",\n      mask: \"99:99:99\",\n      maskPlaceholder: \"0\",\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(event) {\n    let { timeString, seconds } = parseTimeString(event.target.value);\n    this.props.onChangeTime({ time: timeString, seconds: seconds });\n    this.setState({ value: timeString });\n  }\n\n  render() {\n    return (\n      <InputMask\n        {...this.state}\n        id={this.props.id}\n        data-testid={this.props.testId}\n        onKeyUp={this.handleChange}\n        onChange={this.handleChange}\n        className={`${this.props.className} ${styles.timePicker}`}\n      />\n    );\n  }\n}\n\nSecondsInput.propTypes = {\n  onChangeTime: PropTypes.func.isRequired,\n};","export const getExercisesState = (store) => store.exercises;\n\nexport const getAllExercises = (store) => {\n  return getExercisesState(store) ? getExercisesState(store).exercises : [];\n};\n\nexport const getExercisesOptionsState = (store) => store.exercises;\n\nexport const getAllExercisesOptions = (store) => {\n  return getExercisesOptionsState(store)\n    ? getExercisesOptionsState(store).exercisesOptions\n    : [];\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport SecondsInput from \"./SecondsInput\";\nimport DatePicker from \"react-datepicker\";\nimport { validateExerciseForm } from \"../utils\";\nimport { connect } from \"react-redux\";\nimport { addExercise, fetchExercisesOptions } from \"./../redux/actions\";\nimport { getAllExercisesOptions } from \"../redux/selectors\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport styles from \"./exerciseform.module.scss\";\n\nclass ExerciseForm extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      exercise: {\n        date: \"\",\n        seconds: 0,\n        type: \"\",\n      },\n      errors: {},\n    };\n\n    this.onChangeDate = this.onChangeDate.bind(this);\n    this.onChangeTime = this.onChangeTime.bind(this);\n    this.onChangeType = this.onChangeType.bind(this);\n    this.onSubmitForm = this.onSubmitForm.bind(this);\n  }\n\n  componentDidMount() {\n    this.props.fetchExercisesOptions();\n  }\n\n  onSubmitForm(event) {\n    event.preventDefault();\n\n    let { errors, isValid } = validateExerciseForm({\n      exercise: this.state.exercise,\n      exercisesOptions: this.props.exercisesOptions,\n    });\n\n    this.setState({ ...this.state, errors: errors });\n\n    if (!isValid) {\n      return;\n    }\n    this.props.addExercise(this.state.exercise);\n  }\n\n  onChangeTime({ seconds }) {\n    this.setState({\n      ...this.state,\n      exercise: { ...this.state.exercise, seconds },\n    });\n  }\n\n  onChangeType(event) {\n    this.setState({\n      ...this.state,\n      exercise: { ...this.state.exercise, type: event.target.value },\n    });\n  }\n\n  onChangeDate(date) {\n    this.setState({\n      ...this.state,\n      exercise: { ...this.state.exercise, date: date },\n    });\n  }\n\n  render() {\n    const exercisesOptions = this.props.exercisesOptions.map((type, index) => (\n      <option key={`${type}-${index}`} value={type}>\n        {type}\n      </option>\n    ));\n\n    return (\n      <section\n        data-testid=\"exercise-form\"\n        className={styles.addExerciseContainer}\n      >\n        <form className={styles.addExerciseForm} onSubmit={this.onSubmitForm}>\n          <div data-testid=\"time-container\" className={styles.formGroup}>\n            <label className={styles.formLabel} htmlFor=\"timePicker\">\n              Time spent\n            </label>\n            <SecondsInput\n              id=\"timePicker\"\n              testId={\"seconds-input\"}\n              title=\"Type a quantity of spent in this exercise\"\n              placeholder=\"00:55:00\"\n              value={this.state.exercise.seconds}\n              className={styles.formInput}\n              onChangeTime={this.onChangeTime}\n            />\n            <span className={styles.inputError}>\n              {this.state.errors.seconds}\n            </span>\n          </div>\n\n          <div\n            data-testid=\"exercise-type-container\"\n            className={styles.formGroup}\n          >\n            <label className={styles.formLabel} htmlFor=\"selectExercise\">\n              Select an exercise\n            </label>\n            <select\n              id=\"selectExercise\"\n              title=\"Select an exercise type to this exercise\"\n              data-testid=\"exercise-type\"\n              className={styles.formSelect}\n              value={this.state.exercise.type}\n              onChange={this.onChangeType}\n            >\n              <option>Select an option</option>\n              {this.props.exercisesOptions &&\n                this.props.exercisesOptions.length > 0 &&\n                exercisesOptions}\n            </select>\n            <span className={styles.inputError}>{this.state.errors.type}</span>\n          </div>\n\n          <div className={styles.formGroup}>\n            <label className={styles.formLabel} htmlFor=\"datePicker\">\n              Select a date\n            </label>\n            <DatePicker\n              id=\"datePicker\"\n              title=\"Inform a date of when this exercise occurred\"\n              dateFormat=\"dd/MM/yyyy\"\n              selected={this.state.exercise.date}\n              onChange={this.onChangeDate}\n              className={styles.formInput}\n              placeholderText=\"dd/mm/yyyy\"\n              showDisabledMonthNavigation\n              autoComplete=\"off\"\n            />\n            <span className={styles.inputError}>{this.state.errors.date}</span>\n          </div>\n\n          <div className={`${styles.formGroup} ${styles.formGroup05}`}>\n            <button\n              className={`${styles.submitButton} ${styles.submitButtonMarginTop}`}\n              onClick={this.onSubmitForm}\n            >\n              Add\n            </button>\n          </div>\n        </form>\n      </section>\n    );\n  }\n}\n\nExerciseForm.propTypes = {\n  exercisesOptions: PropTypes.array.isRequired,\n};\n\nExerciseForm.defaultProps = {\n  exercisesOptions: [],\n};\n\nconst mapStateToProps = (state) => {\n  const exercisesOptions = getAllExercisesOptions(state);\n  return { exercisesOptions };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    addExercise: (exercise) => {\n      dispatch(addExercise(exercise));\n    },\n    fetchExercisesOptions: () => {\n      dispatch(fetchExercisesOptions());\n    },\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ExerciseForm);\n","import {\n  ADD_EXERCISE,\n  REMOVE_EXERCISE,\n  FETCH_EXERCISES_OPTIONS,\n} from \"./actionTypes\";\nimport { v4 as uuid } from \"uuid\";\n\n/**\n * Provides an action to reducer insert a new exercise in the store\n * @param {Object} exercise\n */\nexport const addExercise = (exercise) => ({\n  type: ADD_EXERCISE,\n  payload: {\n    exercise: { id: uuid(), ...exercise },\n  },\n});\n\n/**\n * Removes the exercise from the store\n * @param {string} id\n */\nexport const removeExercise = (id) => ({\n  type: REMOVE_EXERCISE,\n  payload: {\n    id: id,\n  },\n});\n\nexport const fetchExercisesOptions = () => ({\n  type: FETCH_EXERCISES_OPTIONS,\n  payload: {},\n});\n","export const ADD_EXERCISE = \"ADD_EXERCISE\";\nexport const REMOVE_EXERCISE = \"REMOVE_EXERCISE\";\nexport const FETCH_EXERCISES_OPTIONS = \"FETCH_EXERCISES_OPTIONS\";\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport DataTable from \"react-data-table-component\";\nimport { format } from \"date-fns\";\nimport { connect } from \"react-redux\";\nimport { humanizeSeconds } from \"../utils/index\";\nimport { getAllExercises } from \"../redux/selectors\";\nimport { removeExercise } from \"../redux/actions\";\nimport styles from \"./exercisetable.module.scss\";\n\nclass ExerciseTable extends React.Component {\n  columns = [\n    {\n      name: \"Time\",\n      selector: \"seconds\",\n      sortable: true,\n      cell: ({ seconds }) => {\n        return <span> {humanizeSeconds(seconds)}</span>;\n      },\n    },\n    {\n      name: \"Type\",\n      selector: \"type\",\n      sortable: true,\n    },\n    {\n      name: \"Date\",\n      selector: \"date\",\n      sortable: true,\n      cell: ({ date }, i) => {\n        return <span>{format(new Date(date), \"dd/MM/yyyy\")}</span>;\n      },\n    },\n    {\n      button: true,\n      cell: ({ id }) => {\n        return (\n          <button\n            className={styles.removeExerciseButton}\n            onClick={() => {\n              window.confirm(\"Are you sure you wish to delete this item?\") &&\n                this.props.removeExercise(id);\n            }}\n          >\n            Delete\n          </button>\n        );\n      },\n    },\n  ];\n\n  render() {\n    let totalExerciseSeconds = this.props.exercises.reduce((acc, exercise) => {\n      return exercise.seconds + acc;\n    }, 0);\n\n    let humanizedSeconds = humanizeSeconds(totalExerciseSeconds);\n\n    const header = (\n      <section className={styles.headerContainer}>\n        <h2 className={styles.headingPrincipal}>Exercise History</h2>\n        <h3 className={styles.headingSecondary}>\n          {humanizedSeconds} of exercises\n        </h3>\n      </section>\n    );\n\n    return (\n      <section data-testid=\"exercise-table\">\n        {header}\n        <DataTable\n          noHeader={true}\n          columns={this.columns}\n          data={this.props.exercises}\n          defaultSortField=\"date\"\n          pagination={true}\n        />\n      </section>\n    );\n  }\n}\n\nExerciseTable.propTypes = {\n  exercises: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      seconds: PropTypes.number.isRequired,\n      type: PropTypes.string.isRequired,\n      date: PropTypes.PropTypes.instanceOf(Date).isRequired,\n    }).isRequired\n  ).isRequired,\n};\n\nExerciseTable.defaultProps = {\n  exercises: [],\n};\n\nconst mapStateToProps = (state) => {\n  const exercises = getAllExercises(state);\n  return { exercises };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    removeExercise: (id) => {\n      dispatch(removeExercise(id));\n    },\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ExerciseTable);\n","import React from \"react\";\nimport Header from \"./common/Header\";\nimport ExerciseForm from \"./home/ExerciseForm\";\nimport ExerciseTable from \"./home/ExerciseTable\";\nimport \"./styles/index.scss\";\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col\">\n            <Header />\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"col\">\n            <ExerciseForm />\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"col\">\n            <ExerciseTable />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\n  ADD_EXERCISE,\n  REMOVE_EXERCISE,\n  FETCH_EXERCISES_OPTIONS,\n} from \"../actionTypes\";\n\nimport { fetchExercisesOptions } from \"../../Api\";\n\nconst initialState = {\n  exercises: [],\n  exercisesOptions: [],\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_EXERCISE: {\n      const { exercise } = action.payload;\n      const exercises = [...state.exercises, exercise];\n      return {\n        ...state,\n        exercises: exercises,\n      };\n    }\n    case REMOVE_EXERCISE: {\n      const { id } = action.payload;\n      const exercises = state.exercises.filter(\n        (exercise) => exercise.id !== id\n      );\n      return {\n        ...state,\n        exercises: exercises,\n      };\n    }\n    case FETCH_EXERCISES_OPTIONS: {\n      // fetch the exercise options from the web or\n      // database or anywhere.\n      // Redux does not know nothing of async things\n      // its documentations talks about 'thunks' and\n      // if the fetch is a real async operation we\n      // should move this logic and follow the\n      // redux solutions.\n      const options = fetchExercisesOptions();\n      return {\n        ...state,\n        exercisesOptions: options,\n      };\n    }\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","const fetchExercisesOptions = () => {\n  return [\"run\", \"swim\", \"cardio\", \"walk\"];\n};\n\nexport { fetchExercisesOptions };\n","import { combineReducers } from \"redux\";\nimport exercises from \"./exercises\";\n\nexport default combineReducers({ exercises });\n","const deserializeExercise = (exercise) => {\n  return { ...exercise, date: new Date(exercise.date) };\n};\n\nexport const loadState = () => {\n  try {\n    const loadedState = localStorage.getItem(\"workoutlog\");\n    if (loadedState === null) {\n      return undefined;\n    }\n    const state = JSON.parse(loadedState);\n    const deserializedExercises = state.exercises.exercises.map(\n      deserializeExercise\n    );\n    return { ...state, exercises: { exercises: deserializedExercises } };\n  } catch (err) {\n    return undefined;\n  }\n};\n\nexport const saveState = (state) => {\n  try {\n    localStorage.setItem(\"workoutlog\", JSON.stringify(state));\n  } catch (err) {\n    console.error(\n      `Could not save the state into the localStorage, The following exceptions was raised ${err}`\n    );\n  }\n};\n","import { createStore } from \"redux\";\nimport rootReducer from \"./reducers\";\nimport { loadState, saveState } from \"../localStorage\";\n\n// Create the redux store based on reducers and \n// initial states from './reducers'. It also loads\n// the localStorage data and insert it into the\n// store.\nconst store = createStore(rootReducer, loadState());\n\n// Subscribe changes into the store and save\n// the state in the localStorage database\nstore.subscribe(() => {\n  saveState({\n    exercises: store.getState().exercises,\n  });\n});\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"headerContainer\":\"exercisetable_headerContainer__aRUiW\",\"headingPrincipal\":\"exercisetable_headingPrincipal__33FOs\",\"headingSecondary\":\"exercisetable_headingSecondary__1QYYI\",\"removeExerciseButton\":\"exercisetable_removeExerciseButton__17vAY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"headerContainer\":\"header_headerContainer__1x7sO\",\"headerLogoName\":\"header_headerLogoName__2qOO2\",\"headerLogoNameHighlight\":\"header_headerLogoNameHighlight__3R13f\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"addExerciseContainer\":\"exerciseform_addExerciseContainer__2INO6\",\"addExerciseForm\":\"exerciseform_addExerciseForm__IV6Hc\",\"formGroup\":\"exerciseform_formGroup__AXuBr\",\"formLabel\":\"exerciseform_formLabel__2av6M\",\"formGroup05\":\"exerciseform_formGroup05__1bslb\",\"formInput\":\"exerciseform_formInput__3ROyF\",\"formSelect\":\"exerciseform_formSelect__1kC4w\",\"submitButton\":\"exerciseform_submitButton__2AqjR\",\"submitButtonMarginTop\":\"exerciseform_submitButtonMarginTop__2vkTx\",\"inputError\":\"exerciseform_inputError__1QuMy\"};"],"sourceRoot":""}